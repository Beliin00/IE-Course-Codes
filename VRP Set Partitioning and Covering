import pandas as pd
from gurobipy import *
import numpy as np
from itertools import permutations
import random
import matplotlib.pyplot as plt


complete_demand_list = [300, 3100, 125, 100, 200, 150, 150, 450, 300, 100, 950, 125,
                        150, 150, 550, 150, 100, 150, 400, 300, 1500, 100, 300, 500, 800, 300, 100, 150, 1000]

xcoord = [
    162, 218, 218, 201, 214, 224, 210, 104, 126, 119,
    129, 126, 125, 116, 126, 125, 119, 115, 153, 175,
    180, 159, 188, 152, 215, 212, 188, 207, 184, 207
]

ycoord = [
    354, 382, 358, 370, 371, 370, 382, 354, 338, 340,
    349, 347, 346, 355, 335, 355, 357, 341, 351, 363,
    360, 331, 357, 349, 389, 394, 393, 406, 410, 392
]

# Select 9 random nodes
selected_nodes = random.sample(range(2, 31), 8)

# Create lists for selected nodes and their corresponding demands

corresponding_demand_list = []

for node in selected_nodes:
    corresponding_demand_list.append(complete_demand_list[node - 2])





routes_list= []

# Create subsets
def generate_subsets(selected_nodes, demands, capacity_limit, current_subset=[], current_demand=0, index=0):
    subsets = []

    if current_demand <= capacity_limit:
        subsets.append((list(current_subset), current_demand))

    for i in range(index, len(demands)):
        node_demand = demands[i]
        next_subset = current_subset + [selected_nodes[i]]  # Use the actual node value
        next_demand = current_demand + node_demand

        subsets.extend(generate_subsets(selected_nodes, demands, capacity_limit, next_subset, next_demand, i + 1))

    return subsets

# Assuming you have already defined and populated 'selected_nodes' and 'corresponding_demand_list'
subsets_lists = generate_subsets(selected_nodes, corresponding_demand_list, 4500, current_subset=[], current_demand=0, index=0)


subsets_lists_without = []


for i in  subsets_lists:
    
    subsets_lists_without.append(i[0])

subsets_lists_without = subsets_lists_without[1:]



# Route function

def subset_to_routes(subsets):
    all_permutations = list(permutations(subsets))
    unique_permutations = []

    for perm in all_permutations:
        
        reverse_perm = tuple(reversed(perm))
        if reverse_perm not in unique_permutations:
            unique_permutations.append(perm)

    return unique_permutations


# Turn the subsets into possible routes

for i in subsets_lists_without:
    route = subset_to_routes(i)
    modified_route = [list((1,) + route_elem + (1,)) for route_elem in route]
    routes_list.extend(modified_route)
    
    
        
#Create a new model
mdl = Model("VRP_Set_Partitioning_Example");

K = routes_list
U =  [1] + selected_nodes

Aik = {(i, k): 1 if i in set_k else 0 for i in U for k, set_k in enumerate(K)}


# non_zero_count = sum(1 for value in Aik.values() if value != 0)

# Create the matrix

matrix_data = [
    [0, 63, 56, 42, 55, 64, 56, 58, 39, 45, 33, 37, 38, 46, 41, 37, 43, 49, 9, 16, 19, 23, 26, 11, 64, 64, 47, 69, 60, 59],
    [63, 0, 24, 21, 12, 13, 8, 117, 102, 108, 95, 98, 100, 106, 103, 97, 102, 111, 72, 47, 44, 78, 39, 74, 8, 13, 32, 26, 44, 15],
    [56, 24, 0, 21, 14, 13, 25, 114, 94, 101, 89, 93, 94, 102, 95, 93, 99, 104, 65, 43, 38, 65, 30, 67, 31, 36, 46, 49, 62, 36],
    [42, 21, 21, 0, 13, 23, 15, 98, 82, 87, 75, 78, 80, 86, 83, 77, 83, 91, 52, 27, 23, 57, 18, 53, 24, 26, 26, 36, 43, 23],
    [55, 12, 14, 13, 0, 10, 12, 111, 94, 100, 88, 91, 92, 99, 95, 90, 96, 103, 64, 40, 36, 68, 30, 66, 18, 23, 34, 36, 49, 22],
    [64, 13, 13, 23, 10, 0, 18, 121, 103, 109, 97, 101, 102, 109, 104, 100, 106, 113, 73, 49, 45, 76, 38, 75, 21, 27, 43, 40, 57, 28],
    [56, 8, 25, 15, 12, 18, 0, 110, 95, 100, 87, 91, 92, 98, 96, 89, 94, 103, 65, 40, 37, 72, 33, 67, 9, 12, 25, 24, 38, 10],
    [58, 117, 114, 98, 111, 121, 110, 0, 27, 21, 25, 23, 22, 12, 29, 21, 15, 17, 49, 72, 76, 60, 84, 48, 116, 115, 93, 115, 98, 110],
    [39, 102, 94, 82, 94, 103, 95, 27, 0, 7, 11, 9, 8, 20, 3, 17, 20, 11, 30, 55, 58, 34, 65, 28, 103, 103, 83, 106, 92, 97],
    [45, 108, 101, 87, 100, 109, 100, 21, 7, 0, 13, 10, 8, 15, 9, 16, 17, 4, 36, 61, 64, 41, 71, 34, 108, 108, 87, 110, 96, 102],
    [33, 95, 89, 75, 88, 97, 87, 25, 11, 13, 0, 4, 5, 14, 14, 7, 13, 16, 24, 48, 52, 35, 60, 23, 95, 94, 74, 97, 82, 89],
    [37, 98, 93, 78, 91, 101, 91, 23, 9, 10, 4, 0, 1, 13, 12, 8, 12, 13, 27, 52, 56, 37, 63, 26, 98, 98, 77, 100, 86, 93],
    [38, 100,  94, 80, 92, 102, 92, 22, 8, 8, 5, 1, 0, 13, 11, 9, 13, 11, 28, 53, 57, 37, 64, 27, 100, 99, 79, 102, 87, 94],
    [46, 106, 102, 86, 99, 109, 98, 12, 20, 15, 14, 13, 13, 0, 22, 9, 4, 14, 37, 60, 64, 49, 72, 36, 105, 104, 81, 104, 87, 98],
    [41, 103, 95, 83, 95, 104, 96, 29, 3, 9, 14, 12, 11, 22, 0, 20, 23, 13, 31, 56, 60, 33, 66, 30, 104, 104, 85, 108, 95, 99],
    [37, 97, 93, 77, 90, 100, 89, 21, 17, 16, 7, 8, 9, 9, 20, 0, 6, 17, 28, 51, 55, 42, 63, 28, 96, 95, 74, 97, 81, 90],
    [43, 102, 99, 83, 96, 106, 94, 15, 20, 17, 13, 12, 13, 4, 23, 6, 0, 16, 35, 56, 61, 48, 69, 34, 101, 100, 78, 101, 84, 95],
    [49, 111, 104, 91, 103, 113, 103, 17, 11, 4, 16, 13, 11, 14, 13, 17, 16, 0, 39, 64, 68, 45, 75, 38, 111, 111, 90, 113, 98, 105],
    [9, 72, 65, 52, 64, 73, 65, 49, 30, 36, 24, 27, 28, 37, 31, 28, 35, 39, 0, 25, 28, 21, 36, 2, 73, 73, 55, 77, 67, 68],
    [16, 47, 43, 27, 40, 49, 40, 72, 55, 61, 48, 52, 53, 60, 56, 51, 56, 64, 25, 0, 6, 36, 14, 27, 48, 48, 33, 54, 48, 43],
    [19, 44, 38, 23, 36, 45, 37, 76, 58, 64, 52, 56, 57, 64, 60, 55, 61, 68, 28, 6, 0, 36, 9, 30, 45, 47, 34, 53, 50, 42],
    [23, 78, 65, 57, 68, 76, 72, 60, 34, 41, 35, 37, 37, 49, 33, 42, 48, 45, 21, 36, 36, 0, 39, 19, 81, 82, 68, 89, 83, 78],
    [26, 39, 30, 18, 30, 38, 33, 84, 65, 71, 60, 63, 64, 72, 66, 63, 69, 75, 36, 14, 9, 39, 0, 37, 42, 44, 36, 53, 53, 40],
    [11, 74, 67, 53, 66, 75, 67, 48, 28, 34, 23, 26, 27, 36, 30, 28, 34, 38, 2, 27, 30, 19, 37, 0, 75, 75, 57, 79, 69, 70],
    [64, 8, 31, 24, 18, 21, 9, 116, 103, 108, 95, 98, 100, 105, 104, 96, 101, 111, 73, 48, 45, 81, 42, 75, 0, 6, 27, 19, 37, 9],
    [64, 13, 36, 26, 23, 27, 12, 115, 103, 108, 94, 98, 99, 104, 104, 95, 100, 111, 73, 48, 47, 82, 44, 75, 6, 0, 24, 13, 32, 5],
    [47, 32, 46, 26, 34, 43, 25, 93, 83, 87, 74, 77, 79, 81, 85, 74, 78, 90, 55, 33, 34, 68, 36, 57, 27, 24, 0, 23, 17, 19],
    [69, 26, 49, 36, 36, 40, 24, 115, 106, 110, 97, 100, 102, 104, 108, 97, 101, 113, 77, 54, 53, 89, 53, 79, 19, 13, 23, 0, 23, 14],
    [60, 44, 62, 43, 49, 57, 38, 98, 92, 96, 82, 86, 87, 87, 95, 81, 84, 98, 67, 48, 50, 83, 53, 69, 37, 32, 17, 23, 0, 29],
    [59, 15, 36, 23, 22, 28, 10, 110, 97, 102, 89, 93, 94, 98, 99, 90, 95, 105, 68, 43, 42, 78, 40, 70, 9, 5, 19, 14, 29, 0]
    ]

depot_distances = [0, 63, 56, 42, 55, 64, 56, 58, 39, 45, 33, 37, 38, 46, 41, 37, 43, 49, 9, 16, 19, 23, 26, 11, 64, 64, 47, 69, 60, 59]

# start_row = 0
# start_col = 0
# end_row = start_row + len(U)
# end_col = start_col + len(U)

# small_matrix = [row[start_col:end_col] for row in matrix_data[start_row:end_row]]

# Cost calculating function

def route_with_costs(route_list, small_matrix):
    route_costs_dict = {}
    for index, k in enumerate(route_list):
        route_cost = 0
        for i in range(len(k) - 1):
            route_cost += small_matrix[k[i] - 1][k[i + 1] - 1]
        route_costs_dict[index] = route_cost
    return route_costs_dict 
  
    
#Create cost disctionary C(i,k) = 1 or 0
  
Cost_dict = route_with_costs(routes_list,matrix_data)
        

# Desicion Variable


y = mdl.addVars(range(len(K)), lb=0, ub=1, vtype=GRB.BINARY, name='yk')

# Constraints

mdl.addConstrs(quicksum(Aik[i,k] * y[k] for k in range(len(K))) >= 1 for i in U)

#Objective Function


mdl.setObjective(quicksum(Cost_dict[k]*y[k] for k in range(len(K))), GRB.MINIMIZE)


mdl.update()
mdl.optimize()
print('Optimal solution:')
for v in mdl.getVars():
    print(str(v.VarName) + " = " + str(v.x))    
print('Optimal objective value: ' + str(mdl.objVal) + "\n")

# Print decision variables which are not zeros
if mdl.status != GRB.Status.INF_OR_UNBD and mdl.status != GRB.Status.INFEASIBLE:
    for v in mdl.getVars():
        if mdl.objVal < 1e+99 and v.x != 0:
            print('%s %f' % (v.VarName, v.x))
            
            

print("Selected nodes: ", selected_nodes)

yk_values = mdl.getAttr('x')

# Extract selected routes
selected_routes = [route for yk, route in zip(yk_values, routes_list) if round(yk) == 1]


# Print or use the selected routes
for route in selected_routes:
    print("Optimal route(s):" ,route)
    
# Plot nodes
plt.scatter(xcoord, ycoord, c='blue', label='Nodes')

# Annotate all nodes with their names
for i, (x, y) in enumerate(zip(xcoord, ycoord), start=1):
    plt.annotate(f'{i}', (x, y), textcoords="offset points", xytext=(0, 5), ha='center')

# Plot routes
for route_indices in selected_routes:
    x_route = [xcoord[i - 1] for i in route_indices]
    y_route = [ycoord[i - 1] for i in route_indices]
    x_route.append(x_route[0])  # Connect the last node to the first node
    y_route.append(y_route[0])
    plt.plot(x_route, y_route, c='red', linestyle='solid')

plt.xlabel('X-Coord')
plt.ylabel('Y-Coord')
plt.title('Visualization of Nodes with Routes')
plt.legend()
plt.show()
